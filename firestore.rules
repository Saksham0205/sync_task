rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      // Allow users to read all user profiles (for search functionality)
      allow read: if isAuthenticated();
      
      // Only allow users to write their own profile
      allow write: if isOwner(userId);
      
      // Friends subcollection
      match /friends/{friendId} {
        // Users can read their own friends list
        allow read: if isOwner(userId);
        
        // Users can write to their own friends list
        allow write: if isOwner(userId);
      }
    }
    
    // Friend Requests collection
    match /friendRequests/{requestId} {
      // Users can read requests where they are sender or receiver
      allow read: if isAuthenticated() && 
                     (resource.data.senderId == request.auth.uid || 
                      resource.data.receiverId == request.auth.uid);
      
      // Users can create friend requests where they are the sender
      allow create: if isAuthenticated() && 
                       request.resource.data.senderId == request.auth.uid &&
                       request.resource.data.status == 'pending';
      
      // Users can update requests where they are the receiver (to accept/reject)
      // or where they are the sender (to cancel)
      allow update: if isAuthenticated() && 
                       (resource.data.receiverId == request.auth.uid || 
                        resource.data.senderId == request.auth.uid);
      
      // Users can delete requests where they are the sender (to cancel)
      allow delete: if isAuthenticated() && 
                       resource.data.senderId == request.auth.uid;
    }
    
    // Groups collection
    match /groups/{groupId} {
      // Allow authenticated users to read groups they are members of
      allow read: if isAuthenticated() && 
                     request.auth.uid in resource.data.memberIds;
      
      // Allow group creation
      allow create: if isAuthenticated();
      
      // Allow updates if user is admin
      allow update: if isAuthenticated() && 
                       request.auth.uid in resource.data.adminIds;
      
      // Allow deletion if user is admin
      allow delete: if isAuthenticated() && 
                       request.auth.uid in resource.data.adminIds;
      
      // Tasks subcollection
      match /tasks/{taskId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated();
      }
    }
    
    // Tasks collection (personal tasks)
    match /tasks/{taskId} {
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      allow write: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
    }
  }
}

